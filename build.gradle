repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenLocal()
        maven { url "http://repo.spring.io/libs-release" }
        maven { url "https://plugins.gradle.org/m2/" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath "io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE"
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.4.0'
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: "io.spring.dependency-management"
apply plugin: 'nebula.ospackage'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

task(getVersion) << {
    println "$project.rpm_version"
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'rpm'
        }
    }
}

processResources {
    logger.info "Processing resources with tokens VERSION: $project.rpm_version-$project.rpm_release " +
            "PROJECT_NAME: $project.name RPM_JRE: $project.rpm_jre RPM_USER: $project.rpm_user"
    filter org.apache.tools.ant.filters.ReplaceTokens , tokens:[VERSION: project.rpm_version,
                                                                RELEASE: project.rpm_release,
                                                                PROJECT_NAME: project.name,
                                                                RPM_JRE: project.rpm_jre, RPM_USER: project.rpm_user ]
}

checkstyle {
    configProperties.samedir = configFile.parentFile
    toolVersion = "5.9"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

dependencies {
    def springBootVersion = '1.4.1.RELEASE'
    def springCloudVersion = '1.2.1.RELEASE'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion
    compile group: 'com.google.code.gson' , name: 'gson', version: '2.4'
    compile group: 'io.springfox' , name: 'springfox-swagger2', version: '2.4.0'
    compile group: 'io.springfox' , name: 'springfox-swagger-ui', version: '2.2.2'
    compile group: 'io.dropwizard.metrics' , name: 'metrics-core', version: '3.1.2'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-config', version: springCloudVersion
    compile group: 'net.logstash.logback' , name: 'logstash-logback-encoder' , version: '4.6'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.1.0'
    testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version: '2.1.0'
}

run {
    args = ['--spring.profiles.active=native']
}

bootRun {
    // Use 'native' profile to force use of local application.properties file instead of sourcing
    // config from running Cloud Config Server.
    // NOTE: due to issue with cloud config client, application.yml does not appear to work so has
    //       to be named application.properties
    args = ['--spring.profiles.active=native']
}

mainClassName = 'au.com.imaginary.SpringBootLinkerdApplication'

jar {
    baseName = project.name
    excludes = ['**/*.properties']
    archiveName = 'spring-boot-linkerd.jar'

    manifest {
        attributes 'Built-Date': new Date() //now
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor-Id': project.group
        attributes 'Main-Class': mainClassName
    }
}

ospackage {
    logger.info "Building package version: ${project.rpm_version} release: ${project.rpm_release}"
    packageGroup = project.rpm_packageGroup
    packageName = project.name
    packageDescription = project.rpm_packageDescription
    vendor = project.rpm_vendor
    url = project.rpm_url
    license = project.rpm_license
    arch = project.rpm_arch
    os = project.rpm_os
}

buildRpm {
    version = project.rpm_version
    release = project.rpm_release
    user = project.rpm_user
    permissionGroup = project.rpm_group

    prefix(project.rpm_package_prefix)

    installUtils file('build/resources/main/utils.sh')
    preInstall file('build/resources/main/preInstall.sh')
    postInstall file('build/resources/main/postInstall.sh')
    preUninstall file('build/resources/main/preUninstall.sh')
    postUninstall file('build/resources/main/postUninstall.sh')

    requires('jre', rpm_jre, GREATER | EQUAL)
    requires('s6')
    requires('consul-template')
    requires('portmanage')

    into "${project.rpm_package_prefix}/${project.name}/${version}"

    from build

    from('build/libs') {
        include "${project.name}.jar"
        fileMode = 0644
    }

    from('build/resources/main') {
        fileType CONFIG | NOREPLACE
        fileMode = 0644
    }

    directory("${project.rpm_package_prefix}/${project.name}/${version}", 0644)
    directory("/var/log/${project.name}", 0644)

    link("/opt/${project.name}/current" , "/opt/${project.name}/${version}")
    link("/etc/init/${project.name}.conf", "/opt/${project.name}/current/etc/init/${project.name}.conf")
    link("/etc/logrotate.d/${project.name}", "/opt/${project.name}/current/etc/logrotate.d/${project.name}")
    link("/etc/sensu/conf.d/checks/${project.name}_check_health_http.json", "/opt/${project.name}/current/etc/sensu/" +
            "conf.d/checks/${project.name}_check_health_http.json")
    link("/etc/sensu/conf.d/checks/${project.name}_check_process.json", "/opt/${project.name}/current/etc/sensu/" +
            "conf.d/checks/${project.name}_check_process.json")
    link("/etc/diamond/collectors/HTTPJSONCollector.conf", "/opt/${project.name}/current/etc/diamond/" +
            "collectors/HTTPJSONCollector.conf")
    link("/etc/facter/facts.d/ports.yaml", "/opt/${project.name}/current/etc/facter/facts.d/ports.yaml")

}
